FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Graspe

Api for Learning platform

## Users  [/users]

### Create new user (registration) [POST]

+ `referral_code` is `optional`

+ Request (application/json)

        {
            "email": "test@example.com",
            "name": "John Doe",
            "password": "TestPassword0",
            "referral_code": "dk6ndkb94m2v8r3"
        }

+ Response 200 (application/json)

        {
            "token": token,
            "user": {...}
        }

## Organisations [/organizations]

### Get organisation [/organizations/{id_or_url}] [GET]

+ `has_referral_system` : `boolean`, `true` if organisation owner has setted referral system. Otherwise `false`

+ Response 200 (application/json)

        {
            ...
            "has_referral_system": true
        }


## Organization's Referral System  [/organizations/1/referral-system]

### Set referral system (rewards) [POST]

Create or update referral system for specific organization

+ `rewards_type` : `1` for subscription months, `2` for prize
+ `prize_image_url` and `prize_description` is `optional`

+ Request (application/json)
        
        data:[
                {
                    "rewards_type": 1,
                    "referral_points": 3,
                    "subscription_months_count": 2
                },
                {
                    "rewards_type": 2,
                    "referral_points": 300,
                    "prize_title": "iPhone",
                    "prize_image_url": "https://amazon.cloud/iphone.jpg",
                    "prize_description": "New iPhone"
                }
        ]
        
+ Response 200 (application/json)      

        {status:1 , msg:"The referral was successfully created."}
        
+ Response 500 (application/json)        
        
        {status:0 , msg:"The referral was not created  successfully."}      
        
+ Response 403 (application/json)        
        
        {status:0 , msg:"Only organization administrators can create referrals."}  

### Get referral system [GET]

Get referral system for specific organization

+ Response 200 (application/json)

        {
            "rewards": [
                {
                    "id": 1,
                    "creator_id": 3,
                    "rewards_type": 2,
                    "referral_points": 20,
                    "subscription_months_count": null,
                    "prize_title": "Surprise",
                    "prize_image_url": "/prize.jpg",
                    "prize_description": "Prize Description goes here.",
                    "created_at": null,
                    "updated_at": null
                },
                {
                    "id": 3,
                    "creator_id": 1,
                    "rewards_type": 2,
                    "referral_points": 15,
                    "subscription_months_count": null,
                    "prize_title": "banan",
                    "prize_image_url": "dewdew",
                    "prize_description": "233e23ee2",
                    "created_at": null,
                    "updated_at": null
                },
                {
                    "id": 4,
                    "creator_id": 1,
                    "rewards_type": 2,
                    "referral_points": 15,
                    "subscription_months_count": null,
                    "prize_title": "banan",
                    "prize_image_url": "dewdew",
                    "prize_description": "233e23ee2",
                    "created_at": null,
                    "updated_at": null
                }
            ],
            "user_referral_points": 46
}
        

### Update referral system [/organizations/1/referral-system] 
[PUT]

Update referral system for specific organization   

+ Request (application/json)
       
       data:[
                {
                    "id": 1,
                    "rewards_type": 1,
                    "referral_points": 3,
                    "subscription_months_count": 2
                },
                {
                    "id": 2,    
                    "rewards_type": 2,
                    "referral_points": 300,
                    "prize_title": "iPhone",
                    "prize_image_url": "https://amazon.cloud/iphone.jpg",
                    "prize_description": "New iPhone"
                }
        ]
        
+ Response 200 (application/json)        

        {status:1 , msg:"The referral was successfully updated."}
        
+ Response 500 (application/json)        

        {status:0 , msg:"The referral was not updated successfully."}       
        
+ Response 403 (application/json)        

        {status:0 , msg:"Only organization administrators can update referrals."}        
        
### Get referral system subscribers [/organizations/1/referral-system/subscribers] [GET]        

+ `created_at`: date of registration
+ `subscriber_date`: date of subscription

+ Response 200 (application/json)
        {
           "potential": [
               {
                   "id": 1,
                   "inviter_id": "1",
                   "user_id": "2",
                   "subscriber_date": null,
                   "status_id": "1",
                   "created_at": null,
                   "updated_at": null,
                   "is_new": true,
                   "user_name: "John Doe"
               },
               {
                   "id": 3,
                   "inviter_id": "12",
                   "user_id": "44",
                   "subscriber_date": null,
                   "status_id": "1",
                   "created_at": 2017-08-24 00:00:00,
                   "updated_at": null,
                   "is_new": false,
                   "user_name: "Test User1"
               }
           ],
           "confirmed": [
               {
                   "id": 2,
                   "inviter_id": "4",
                   "user_id": "5",
                   "subscriber_date": 2017-08-24 00:00:00,
                   "status_id": "2",
                   "created_at": 2017-07-24 00:00:00,
                   "updated_at": null,
                   "is_new": false,
                   "user_name: "Test User2"
               }
           ]
        }


### Check referral system updates [/organizations/1/referral-system/check] [GET]  

Check if user has updates (new confirmed or potential referrals). 
This endpoint would be requested frequently (every 30 - 60 seconds) to notify user about updates.

+ Response 200 (application/json)

        {
            "has_updates": true
        }


### Set or update referral's inviter [/organizations/1/referral-system/inviter] [POST]  

When existing user opens organisation via referral link we need to set (or update) his inviter.

+ Request (application/json)
        {
            "referral_code": "dk6ndkb94m2v8r3"
        }
        
+ Response 200 (application/json)

        {
           "status":1, "msg": "Referral's inviter was updated."
        }
        
+ Response 409 (application/json)

        {
           "status":0, "msg": "This user is already confirmed subscriber."
        }
        
        
+ Response 404 (application/json)

        {
           "status":0, "msg": "This referral link is incorrect."
        }              

### Claim Reward [ /organizations/{id}/referral-system/claim-reward] [GET]         


+ case if `rewards_type` : `1` 

+ Request (application/json)
        {
            "id": "1",
            "city": "Yerevan",
            "zip_code": "4831",
            "street_address":"Mamikonyanc 48"
        }

+ case if `rewards_type` : `2` 

+ Request (application/json)
        {
            "id": "2"
        }

+ Response 200 (application/json)

        {
           "status":1, "msg": "claim success"
        }
        
+ Response 404 (application/json)

        {
           "status":0, "msg": "You have not enough points."
        }        
        
+ Response 400 (application/json)
        {
            "status": 0,
            "msg": {
                "city": [
                    "The city field is required."
                ],
                "zip_code": [
                    "The zip code field is required."
                ],
                "street_address": [
                    "The street address field is required."
                ]
            }
        } 
        
        
+ Response 500 (application/json)
        {
            "status": 0,
            "msg": "Something went wrond during e-mail sending."
        }
        
## Terms and Conditions  [/tac]

### Get default TaC text [/tac] [GET]

+ Response 200 (application/json)

        {
            "tac": ...
        }
        
### Get the latest version of TaC for specified organization [/tac/{org_id}] [GET]

+ Response 200 (application/json)

        {
            "tac": ...
        }
        
        
### Update the TaC for specified organization [/tac/{org_id}] [POST]

+ Request (application/json)

        {
            "tac": ...
        }
        
+ Response 200 (application/json)

        {
            "status": 1,
            "msg": The TaC was successfully updated
        }
        
+ Response 500 (application/json)

        {
            "status": 0,
            "msg": Something went wrong during TaC updating.
        }
        
        
### Get organization lessons, groups, classes and lesson requests [/organizations/{organisation_id}/feed/{limitParam}/{page}] [GET]

+Response 200 (application/json)

        {
              "total": 1,
 +            "per_page": "1",
 +            "current_page": 1,
 +            "last_page": 1,
 +            "next_page_url": ...,
 +            "prev_page_url": ...,
 +            "from": 1,
 +            "to": 1,
 +            "data": [  //materials sorted by date
                   {/* lesson... */},
                   {/* class... */},
                   {/* another lesson... */},
                   {/* lesson_request... */},
                   {/* another lesson_request... */},
                   {/* group... */}
                   ...
               ]
        }
        
+Response 404 (application/json)

        {
           "status":"0",
           "msg":"The spicified resource was not found."
        }
        
